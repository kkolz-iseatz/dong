#!/usr/bin/env ruby
#
# dong
# Colin Rymer / @crymer11
#
# Sorry, mom.

require 'optparse'

class Dong

  attr_accessor :soft_length, :hard_length, :refractory_period, :spurt_size, :swordfight,
                :spurt_distance, :girth, :balls, :direction, :dong_stage, :moneyshot

  def initialize args
    @refractory_period = 2
    @soft_length = 2
    @hard_length = 5
    @spurt_size = 4
    @spurt_distance = 8
    @thickness = "thick"
    @balls = "big"
    @direction = "right"
    @moneyshot = false
    @swordfight = false

    args.each { |k,v| instance_variable_set("@#{k}", v) unless v.nil? }
  end

  def length
    if @dong_stage < dong_factor
      return @soft_length + @dong_stage
    elsif @dong_stage >= dong_factor && @dong_stage < spurt_cycle_end
      return @hard_length
    elsif @dong_stage >= (dong_cycle_end - cooldown - @refractory_period) && @dong_stage < (dong_cycle_end - @refractory_period)
      return @hard_length - (@dong_stage - (dong_cycle_end - cooldown - @refractory_period))
    else
      return @soft_length
    end
      
  end

  def member(direction)
    pole = ""
    length.times {pole << shaft}
    if direction == "left"
      return (girthy ? "C" : "c") << pole << balls
    else
      return balls << pole << (girthy ? "D" : "")
    end
  end

  def spurt(direction)
    splurge = ""
    spurt_stage = @dong_stage - dong_factor
    if spurt_stage <= @spurt_size
      spurt_length = spurt_stage
      back_space = 0
      front_space = @spurt_distance - spurt_length
    else
      back_space = spurt_stage - @spurt_size
      if back_space <= (@spurt_distance - @spurt_size)
        spurt_length = @spurt_size
        front_space = @spurt_distance - spurt_length - back_space
      else
        spurt_length = @spurt_distance - back_space
        front_space = 0
      end
    end

    if direction == "left"
      front_space.times {splurge << " "}
      spurt_length.times {splurge << "~"}
      back_space.times {splurge << " "}
    else
      back_space.times {splurge << " "}
      spurt_length.times {splurge << "~"}
      front_space.times {splurge << " "}
    end
    return splurge
  end

  def schlong
    unit = ""
    spray = true if length >= @hard_length
    if @direction == "right"
      unit << member("right")
      unit << (spray ? spurt("right") : no_spurt)
      unit << target
    else
      unit << target
      unit << (spray ? spurt("left") : no_spurt)
      unit << member("left")
    end
    unit
  end

  def target
    if @moneyshot === "boobs"
      return "(.)(.)"
    elsif @moneyshot === "butt"
      return "( Y )"
    elsif @moneyshot === "face"
      return "('o')"
    else
      return ""
    end
  end

  def no_spurt; result = ""; @spurt_distance.times{result << " "}; return result end
  def balls; if @balls == "big" then return "8" else return ":" end end
  def shaft; if girthy then return "=" else return "-" end end
  def cooldown; dong_factor end
  def dong_cycle_end; dong_factor+@spurt_distance+@spurt_size+cooldown+@refractory_period end
  def spurt_cycle_end; dong_cycle_end - cooldown - @refractory_period end
  def dong_factor; @hard_length - @soft_length; end
  def girthy; (@girth === "thick") || false end
  def next_dong_stage; (@dong_stage + 1) % dong_cycle_end end
  

end

options = {
  balls:          "big",                  # DEFAULT_BALLS
  direction:      "right",                # DEFAULT_DIRECTION
  file:           "#{ENV['HOME']}/.dong", # DEFAULT_SAVE_FILE
  hard_length:    5,                      # DEFAULT_HARD_LENGTH
  moneyshot:      "none",                 # DEFAULT_MONEYSHOT
  refractory:     2,                      # DEFAULT_REFRACTORY_PERIOD
  soft_length:    2,                      # DEFAULT_SOFT_LENGTH
  spurt_distance: 8,                      # DEFAULT_SPURT_DISTANCE
  spurt_size:     4,                      # DEFAULT_SPURT_SIZE
  swordfight:     false,                  # DEFAULT_SWORDFIGHT_STATUS
  thickness:      "thick"                 # DEFAULT_THICKNESS
}

OptionParser.new do |opts|
  opts.on("-b", "--tinyballs", "give the dong tiny balls.") { options[:balls] = "tiny"}
  opts.on("-d", "--distance [LENGTH]", "distance of the spurt") {|opt| options[:spurt_distance] = opt }
  opts.on("-e", "--erect [LENGTH]", "length of the hard dong") {|opt| options[:hard_length] = opt }
  opts.on("-f", "--flaccid [LENGTH]", "length of the soft dong") {|opt| options[:soft_length] = opt }
  opts.on("-l", "--left", "normally, it hangs to the right.") { options[:direction] = "left" }
  opts.on("-m", "--moneyshot [boobs|butt|face]", "give that dong a target.") {|opt| options[:moneyshot] = opt }
  opts.on("-r", "--refractory [PERIOD]", "length of the refractory period") {|opt| options[:refractory] = opt }
  opts.on("-s", "--spurt [SIZE]", "size of the spurt") {|opt| options[:spurt_size] = opt }
  opts.on("-t", "--thin", "none of those thick dongs; make it thin") { options[:thickness] = "thin" }
  opts.on("-w", "--swordfight", "make those dongs battle") { options[:swordfight] == true }
  opts.on("-x", "--file URI", "special save file location.") {|opt| options[:file] = opt }
  opts.on("-h", "--help", "Display this screen" ) { puts opts; exit }
end.parse!

file = options[:file]

File.open( file, 'w') {|f| f.write "0" } if !File.exists? file

penis = Dong.new ({
                    soft_length: Integer(options[:soft_length]), 
                    hard_length: Integer(options[:hard_length]),
                    refractory_period: Integer(options[:refractory]),
                    spurt_size: Integer(options[:spurt_size]),
                    spurt_distance: Integer(options[:spurt_distance]),
                    girth: options[:thickness],
                    balls: options[:balls],
                    direction: options[:direction],
                    moneyshot: options[:moneyshot],
                    swordfight: options[:swordfight],
                    dong_stage: Integer(File.read file)
                  })

File.open(file, 'w'){|f| f.write (penis.next_dong_stage) }

puts penis.schlong
